// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/AndreyAndreevich/otus_go/calendar/internal/domain"
	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// Calendar is an autogenerated mock type for the Calendar type
type Calendar struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, event
func (_m *Calendar) Create(ctx context.Context, event domain.Event) error {
	ret := _m.Called(ctx, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Event) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DailyEventList provides a mock function with given fields: _a0, _a1
func (_m *Calendar) DailyEventList(_a0 context.Context, _a1 time.Time) ([]domain.Event, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []domain.Event
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []domain.Event); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MonthlyEventList provides a mock function with given fields: _a0, _a1
func (_m *Calendar) MonthlyEventList(_a0 context.Context, _a1 time.Time) ([]domain.Event, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []domain.Event
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []domain.Event); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: ctx, id
func (_m *Calendar) Remove(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, event
func (_m *Calendar) Update(ctx context.Context, event domain.Event) error {
	ret := _m.Called(ctx, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Event) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WeeklyEventList provides a mock function with given fields: _a0, _a1
func (_m *Calendar) WeeklyEventList(_a0 context.Context, _a1 time.Time) ([]domain.Event, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []domain.Event
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []domain.Event); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
